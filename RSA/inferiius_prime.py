#!/usr/bin/env python3

from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCD

def iroot(k, n):
    x, y = n, n + 1
    while x < y:
        y = x
        z = (k - 1) * y + (n // pow(y, k - 1))
        x = z // k
    return x


n = 25951556187653738583269104842904654291932289621594193304597392028904661596076452667558934021541234049058967351652120705280472946769784797547191796971267609363773639721703856779540387510784233893189168311683404975332255893314721354397160320710659290176490402943118990773808959863166427828181060074037750228531578905713745465303242166481238122513469305542964726347620696450696188800794846605801133281347453266150265191609447694205120789606049328114093913538358941577400790735738279821847028710711811383512868395327332181426055440026510711363696772997838517092791917399764210343969684330124551900424044356832950959600497
e = 3
ct = 605877858433027603541142896448019044718598083014741806340445425957159123895702361904803311842000502686580406336826200661576812020411053632176514866648130959982749184

print(long_to_bytes(iroot(3, ct)).decode())